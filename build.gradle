plugins {
	id 'java-library'
	id 'eclipse'
}

group = 'etri'
version = '20.02.12'

sourceCompatibility = '11'
targetCompatibility = '11'
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal()
	maven {
		url "http://maven.geotoolkit.org"
		allowInsecureProtocol = true
	}
	maven {
		url "http://www.datanucleus.org/downloads/maven2/"
		allowInsecureProtocol = true
	}
    mavenCentral()
	maven {
		url "https://repo.osgeo.org/repository/release/"
		allowInsecureProtocol = true
	}
}

sourceSets.main.java.srcDirs += 'src/main/antlr'

ext {
	hadoop_version = '2.7.3'
	geotools_version = '26.1'
	objenesis_version = '2.6'
	antlr4_version = '4.7'
	mvel2_version = '2.4.14.Final'
	rxjava3_version = '3.1.8'
}

dependencies {
	implementation project(':utils')
	implementation project(':utilsx')
	implementation project(':marmot.common')
	
	implementation ("org.apache.hadoop:hadoop-client:${hadoop_version}") {
		exclude group: 'com.google.guava'		// shadow 시킬 목적
		exclude group: 'com.google.protobuf'	// shadow 시킬 목적
		exclude group: 'io.netty'				// shadow 시킬 목적
		exclude group: 'org.apache.commons.cli'	// shadow 시킬 목적
		
		// 'com.sun.jersey.contribs:jersey.guice' module에서 guava를 예전 버전을 사용하기 때문에 
		// guava shadow시 바뀐 reference를 사용하지 않게 하기 위해서 'jersey.guice' module을
		// 제외시킨다. 그렇지 않으면 map/reduce 작업시 오류 발생됨.
		exclude group: 'com.sun.jersey.contribs'
	}
	
	// GeoTools, JTS, Proj4J
	implementation	"org.geotools:gt-grid:${geotools_version}"
	implementation 'com.googlecode.efficient-java-matrix-library:ejml:0.25'
	
	implementation 'javax.measure:jsr-275:0.9.4'

	// ANTLR
	implementation "org.antlr:antlr4-runtime:${antlr4_version}"

	// Jackson
	implementation "com.fasterxml.jackson.core:jackson-databind:2.6.5"
	
	// Misc
	implementation "org.mvel:mvel2:${mvel2_version}"
	implementation "io.reactivex.rxjava3:rxjava:${rxjava3_version}"
	implementation "org.objenesis:objenesis:2.6"
	implementation files('lib/concave_hull.jar')
	implementation files('lib/javaGeom-0.11.2.jar')
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

javadoc {
	exclude "**/proto/**"
	options.charSet = 'UTF-8'
}
task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
}

eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.startsWith("src/test/")
							|| entry.path.startsWith("build/generated/source/proto/test/") ) {
							entry.output = 'test_classes'
						}
						else {
							entry.output = 'classes'
						}
					}
				}
			}
		}
	}
}